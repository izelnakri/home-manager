return {
  -- {
  --   "hrsh7th/nvim-cmp", -- Autocompletion, See: `:help cmp`
  --   event = "InsertEnter",
  --   dependencies = {
  --     {
  --       "L3MON4D3/LuaSnip",
  --       build = (function()
  --         if vim.fn.has("win32") == 1 or vim.fn.executable("make") == 0 then
  --           return
  --         end
  --         return "make install_jsregexp"
  --       end)(),
  --       dependencies = {
  --         -- `friendly-snippets` contains a variety of premade snippets.
  --         --    See the README about individual language/framework/plugin snippets:
  --         --    https://github.com/rafamadriz/friendly-snippets
  --         -- {
  --         --   'rafamadriz/friendly-snippets',
  --         --   config = function()
  --         --     require('luasnip.loaders.from_vscode').lazy_load()
  --         --   end,
  --         -- },
  --       },
  --     },
  --     "saadparwaiz1/cmp_luasnip", -- NOTE: Do I need this?
  --     "hrsh7th/cmp-nvim-lsp",
  --     "hrsh7th/cmp-path",
  --   },
  --   config = function()
  --     local cmp = require("cmp")
  --     local luasnip = require("luasnip")
  --     luasnip.config.setup({})
  --
  --     cmp.setup({
  --       snippet = {
  --         expand = function(args)
  --           luasnip.lsp_expand(args.body)
  --         end,
  --       },
  --       completion = { completeopt = "menu,menuone,noinsert" },
  --
  --       -- For an understanding of why these mappings were
  --       -- chosen, you will need to read `:help ins-completion`, it is really good!
  --       mapping = cmp.mapping.preset.insert({
  --         -- Select the [n]ext item
  --         ["<C-n>"] = cmp.mapping.select_next_item(),
  --         -- Select the [p]revious item
  --         ["<C-p>"] = cmp.mapping.select_prev_item(),
  --
  --         -- Scroll the documentation window [b]ack / [f]orward
  --         ["<C-b>"] = cmp.mapping.scroll_docs(-4),
  --         ["<C-f>"] = cmp.mapping.scroll_docs(4),
  --
  --         -- Accept ([y]es) the completion.
  --         --  This will auto-import if your LSP supports it.
  --         --  This will expand snippets if the LSP sent a snippet.
  --         ["<C-y>"] = cmp.mapping.confirm({ select = true }),
  --
  --         -- If you prefer more traditional completion keymaps,
  --         -- you can uncomment the following lines
  --         --['<CR>'] = cmp.mapping.confirm { select = true },
  --         --['<Tab>'] = cmp.mapping.select_next_item(),
  --         --['<S-Tab>'] = cmp.mapping.select_prev_item(),
  --
  --         -- Manually trigger a completion from nvim-cmp.
  --         --  Generally you don't need this, because nvim-cmp will display
  --         --  completions whenever it has completion options available.
  --         ["<C-Space>"] = cmp.mapping.complete({}),
  --
  --         -- Think of <c-l> as moving to the right of your snippet expansion.
  --         --  So if you have a snippet that's like:
  --         --  function $name($args)
  --         --    $body
  --         --  end
  --         --
  --         -- <c-l> will move you to the right of each of the expansion locations.
  --         -- <c-h> is similar, except moving you backwards.
  --         ["<C-l>"] = cmp.mapping(function()
  --           if luasnip.expand_or_locally_jumpable() then
  --             luasnip.expand_or_jump()
  --           end
  --         end, { "i", "s" }),
  --         ["<C-h>"] = cmp.mapping(function()
  --           if luasnip.locally_jumpable(-1) then
  --             luasnip.jump(-1)
  --           end
  --         end, { "i", "s" }),
  --
  --         -- For more advanced Luasnip keymaps (e.g. selecting choice nodes, expansion) see:
  --         --    https://github.com/L3MON4D3/LuaSnip?tab=readme-ov-file#keymaps
  --       }),
  --       sources = {
  --         { name = "nvim_lsp" },
  --         { name = "luasnip" },
  --         { name = "path" },
  --       },
  --     })
  --   end,
  -- },
}

-- TODO: MY PREVIOUS CONFIG:

-- -- TODO: <C-k> and <C-j> should start completion suggestions on cmd mode
-- return {
--   {
--     "L3MON4D3/LuaSnip",
--     dependencies = { "rafamadriz/friendly-snippets" },
--     keys = function()
--       return {}
--     end,
--   },
--   {
--     "David-Kunz/cmp-npm",
--   },
--   {
--     "hrsh7th/nvim-cmp",
--     dependencies = {
--       "hrsh7th/cmp-emoji",
--     },
--     event = { "InsertEnter", "CmdlineEnter" },
--     ---@param opts cmp.ConfigSchema
--     opts = function(_, opts)
--       vim.api.nvim_set_hl(0, "CmpGhostText", { link = "Comment", default = true })
--       table.insert(opts.sources, { name = "emoji" })
--       table.insert(opts.sources, { name = "npm", keyword_length = 4 })
--
--       local cmp = require("cmp")
--       local scroll_down_or_initiate_completion = function()
--         cmp.select_next_item({ behavior = cmp.SelectBehavior.Insert })
--       end
--
--       -- Luasnip_just_inserted
--       -- TODO: Should this be only on insert mode?
--       opts.mapping = cmp.mapping.preset.insert({
--         ["<C-f>"] = function()
--           if cmp.visible() then
--             return (cmp.mapping.confirm({ select = true }))()
--           else
--             return (cmp.mapping.complete())()
--           end
--         end,
--         ["<CR>"] = cmp.mapping(function(fallback)
--           fallback()
--         end),
--         ["<C-j>"] = cmp.mapping({
--           i = scroll_down_or_initiate_completion,
--           c = scroll_down_or_initiate_completion,
--           n = scroll_down_or_initiate_completion,
--         }),
--         ["<C-k>"] = cmp.mapping({
--           i = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
--           c = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
--         }),
--         ["<Tab>"] = cmp.mapping(function(fallback)
--           fallback()
--         end),
--         ["<S-Tab>"] = cmp.mapping(function(fallback)
--           fallback()
--         end),
--         -- ["<Tab>"] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
--         -- ["<S-Tab>"] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
--         ["<C-d>"] = cmp.mapping.scroll_docs(4),
--         ["<C-u>"] = cmp.mapping.scroll_docs(-4),
--       })
--     end,
--   },
-- }
--
--
--
